"bcrypt": mã hóa password trước khi đưa vào database

"body-parser": 
- Mục đích: Dùng để phân tích dữ liệu đầu vào của các yêu cầu HTTP, đặc biệt là dữ liệu được gửi qua phương thức POST.
- Chức năng: Chuyển đổi dữ liệu trong body của request thành các định dạng dễ sử dụng, chẳng hạn như JSON hoặc chuỗi ký tự. Giúp bạn dễ dàng truy cập vào dữ liệu được gửi từ phía client trong các request HTTP.,

"cors": cho phép frontend lấy dữ liệu từ backend khác nguồn,

"dotenv": để tạo file .env những biến trong file này sẽ là biến môi trường,

"express": cấu hình route, method http...,

"jsonwebtoken": phân quyền,

"mongoose": tương tác với mongoDB bằng những schema,

"multer": 
Mục đích: Được sử dụng để xử lý các tệp tải lên (file uploads) trong các ứng dụng Node.js.
Chức năng: Multer cung cấp các phương thức để xử lý việc tải lên các tệp từ các form HTML,
quản lý việc lưu trữ tệp trên máy chủ, và xử lý c
ác tệp này trong quá trình xử lý yêu cầu HTTP.

"nodemon": refetch server when new something,

"stripe": "^16.8.0",
Mục đích: Dùng để tích hợp và xử lý thanh toán trực tuyến.
Chức năng: Stripe cung cấp các API mạnh mẽ để xử lý các giao dịch thanh toán, 
quản lý thẻ tín dụng, lập hóa đơn, và các hoạt động liên quan đến thanh toán khác trong các ứng dụng web và di động.

"validator": 
Mục đích: Dùng để kiểm tra và xác thực các chuỗi ký tự (strings) trong ứng dụng của bạn.
Chức năng: Validator cung cấp nhiều hàm tiện ích để xác thực các loại dữ liệu khác 
nhau như email, URL, số điện thoại, v.v., đảm bảo rằng dữ liệu đầu vào đáp ứng các yêu cầu nhất định trước khi được xử lý hoặc lưu trữ.


"type": "module", trong file package.json để có thể
viết theo kiểu import, export chứ ko cần require nữa

Lỗi MulterError: Unexpected field xảy ra khi tên trường của 
tệp tải lên không khớp với cấu hình mà bạn đã định nghĩa 
trong multer. Để khắc phục, bạn cần kiểm tra tên trường và 
cấu hình multer để đảm bảo sự nhất quán giữa phía server và client.